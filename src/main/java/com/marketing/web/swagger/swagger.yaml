swagger: '2.0'
info:
  description: OnlinePlasiyer api documentation
  version: '1.0'
  title: OnlinePlasiyer Documentation
  contact: {}
host: 'localhost:8080'
basePath: /
tags:
  - name: cart-controller
    description: Cart Controller
  - name: categories-controller
    description: Categories Controller
  - name: definitions-controller
    description: Definitions Controller
  - name: health-controller
    description: Health Controller
  - name: invoice-controller
    description: Invoice Controller
  - name: order-controller
    description: Order Controller
  - name: photos-controller
    description: Photos Controller
  - name: products-controller
    description: Products Controller
  - name: tickets-controller
    description: Tickets Controller
  - name: user-controller
    description: User Controller
paths:
  /api/cart:
    get:
      tags:
        - cart-controller
      summary: Get User's Cart
      operationId: getCartUsingGET
      description: Used only for user who has customer role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableCart'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/cart/addItem:
    post:
      tags:
        - cart-controller
      summary: Add Item to user's cart
      operationId: addItemUsingPOST
      description: Used only for user who has customer role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: writableCartItem
          description: writableCartItem
          required: true
          schema:
            $ref: '#/definitions/WritableCartItem'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/cart/checkout:
    post:
      tags:
        - cart-controller
      summary: Checkout user's cart
      operationId: checkoutUsingPOST
      description: Used only for user who has customer role
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableOrder'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/cart/clear:
    get:
      tags:
        - cart-controller
      summary: Clear user's cart
      operationId: clearCartUsingGET
      description: Used only for user who has customer role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/cart/removeItem/{id}':
    post:
      tags:
        - cart-controller
      summary: Remove item from user's cart
      operationId: removeItemUsingPOST
      description: Used only for user who has customer role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/categories:
    get:
      tags:
        - categories-controller
      summary: Get all categories
      operationId: getAllUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: filter
          in: query
          description: filter
          required: false
          type: boolean
        - name: sub
          in: query
          description: sub
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableCategory'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/categories/create:
    post:
      tags:
        - categories-controller
      summary: Create new category
      operationId: createCategoryUsingPOST
      description: Used only for user who has admin role
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: parentId
          in: query
          required: false
          type: string
        - name: subCategory
          in: query
          required: false
          type: boolean
        - name: uploadfile
          in: formData
          description: uploadfile
          required: true
          type: file
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableCategory'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/categories/delete/{id}':
    delete:
      tags:
        - categories-controller
      summary: Delete category with uuid
      operationId: deleteCategoryUsingDELETE
      description: Used only for user who has admin role
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableCategory'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  '/api/categories/update/{id}':
    put:
      tags:
        - categories-controller
      summary: Update category with uuid
      operationId: updateCategoryUsingPUT
      description: Used only for user who has admin role
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - name: name
          in: query
          required: false
          type: string
        - name: parentId
          in: query
          required: false
          type: string
        - name: subCategory
          in: query
          required: false
          type: boolean
        - name: uploadfile
          in: formData
          description: uploadfile
          required: false
          type: file
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableCategory'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/categories/{id}':
    get:
      tags:
        - categories-controller
      summary: Find category by uuid
      operationId: findByUUIDUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableCategory'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/definitions/cities:
    get:
      tags:
        - definitions-controller
      summary: Get cities recorded in system
      operationId: getCitiesUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/definitions/cities/{id}/states':
    get:
      tags:
        - definitions-controller
      summary: Get states by city id
      operationId: getStatesByCityUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/State'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/definitions/roles:
    get:
      tags:
        - definitions-controller
      summary: Get roles in system
      operationId: getRolesUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/definitions/unitTypes:
    get:
      tags:
        - definitions-controller
      summary: Get unit types for product save
      operationId: getUnitTypesUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/invoices:
    get:
      tags:
        - invoice-controller
      summary: getAll
      operationId: getAllUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableInvoice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/invoices/byOrder/{orderId}':
    post:
      tags:
        - invoice-controller
      summary: getByOrder
      operationId: getByOrderUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableInvoice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/orders:
    get:
      tags:
        - order-controller
      summary: getUserBills
      operationId: getUserBillsUsingGET
      produces:
        - '*/*'
      parameters:
        - in: body
          name: searchOrder
          description: searchOrder
          required: false
          schema:
            $ref: '#/definitions/SearchOrder'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableOrder'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/orders/details/{id}':
    post:
      tags:
        - order-controller
      summary: getUserBills
      operationId: getUserBillsUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableOrder'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/orders/sales:
    get:
      tags:
        - order-controller
      summary: getUserSales
      operationId: getUserSalesUsingGET
      produces:
        - '*/*'
      parameters:
        - in: body
          name: searchOrder
          description: searchOrder
          required: false
          schema:
            $ref: '#/definitions/SearchOrder'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableOrder'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/orders/update/{id}':
    post:
      tags:
        - order-controller
      summary: updateOrder
      operationId: updateOrderUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: order
          description: order
          required: true
          schema:
            $ref: '#/definitions/WritableOrder'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableOrder'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/products:
    get:
      tags:
        - products-controller
      summary: Get all products
      operationId: getAllUsingGET_2
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableProduct'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/products/actives:
    get:
      tags:
        - products-controller
      summary: Get all active products
      operationId: getAllActivesUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableProduct'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/products/barcode/{barcode}':
    get:
      tags:
        - products-controller
      summary: Get all products by barcode
      operationId: getByBarcodeUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: barcode
          in: path
          description: barcode
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableProduct'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/products/category/{categoryId}':
    get:
      tags:
        - products-controller
      summary: Get all products by category uuid
      operationId: getAllByCategoryUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: categoryId
          in: path
          description: categoryId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableProduct'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/products/create:
    post:
      tags:
        - products-controller
      summary: Create product
      operationId: createProductUsingPOST
      description: Used for users who has admin or merchant role
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: barcode
          in: query
          required: false
          type: string
        - name: categoryId
          in: query
          required: false
          type: integer
          format: int64
        - name: name
          in: query
          required: false
          type: string
        - name: status
          in: query
          required: false
          type: boolean
        - name: tax
          in: query
          required: false
          type: number
          format: double
        - name: uploadfile
          in: formData
          description: uploadfile
          required: true
          type: file
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/products/delete/{id}':
    delete:
      tags:
        - products-controller
      summary: Delete product with uuid
      operationId: deleteProductUsingDELETE
      description: Used only for user who has admin role
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableProduct'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/products/live:
    get:
      tags:
        - products-controller
      summary: Get products as stream
      operationId: subscribeUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SseEmitter'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/products/specify/create:
    post:
      tags:
        - products-controller
      summary: Create product specify
      operationId: createProductSpecifyUsingPOST
      description: Used for users who has admin or merchant role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: writableProductSpecify
          description: writableProductSpecify
          required: true
          schema:
            $ref: '#/definitions/WritableProductSpecify'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/products/update/{id}':
    put:
      tags:
        - products-controller
      summary: Update product with uuid
      operationId: updateProductUsingPUT
      description: Used only for user who has admin role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: updatedProduct
          description: updatedProduct
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableProduct'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/products/{id}':
    get:
      tags:
        - products-controller
      summary: Get product by uuid
      operationId: getByIdUsingGET
      description: Every user can use
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableProduct'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/tickets:
    get:
      tags:
        - tickets-controller
      summary: Get all tickets
      operationId: getAllTicketsUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableTicket'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/tickets/changeStatus/{id}':
    post:
      tags:
        - tickets-controller
      summary: Change ticket status with uuid
      operationId: changeTicketStatusUsingPOST
      description: Used only for user who has admin role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: ticketStatus
          description: ticketStatus
          required: true
          schema:
            type: string
            enum:
              - OPEN
              - ANSWERED
              - CLOSED
              - SOLVED
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableTicket'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/tickets/create:
    post:
      tags:
        - tickets-controller
      summary: Open new ticket
      operationId: createTicketUsingPOST
      description: Every user can use
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: writableTicket
          description: writableTicket
          required: true
          schema:
            $ref: '#/definitions/WritableTicket'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableTicket'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/tickets/update/{id}':
    post:
      tags:
        - tickets-controller
      summary: Update ticket
      operationId: updateTicketUsingPOST
      description: Every user can use(Admin can update every ticket, another users update only own tickets)
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: writableTicket
          description: writableTicket
          required: true
          schema:
            $ref: '#/definitions/WritableTicket'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableTicket'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/tickets/{id}/createReply':
    post:
      tags:
        - tickets-controller
      summary: Answer ticket
      operationId: createTicketReplyUsingPOST
      description: Every user can use(Admin can answer every ticket, another users answer only own tickets)
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: writableTicketReply
          description: writableTicketReply
          required: true
          schema:
            $ref: '#/definitions/WritableTicketReply'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableTicketReply'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/tickets/{id}/replies':
    get:
      tags:
        - tickets-controller
      summary: Get all replies in ticket
      operationId: getTicketRepliesUsingGET
      description: Every user can use(Admin can see every ticket replies, another users can only see own tickets)
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReadableTicketReply'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/activeStates:
    get:
      tags:
        - user-controller
      summary: Get user's active states
      operationId: getActiveStatesUsingGET
      description: Used only for user who has merchant role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/addActiveState:
    post:
      tags:
        - user-controller
      summary: Add state in user's active states
      operationId: addActiveStateUsingPOST
      description: Used only for user who has merchant role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: states
          description: states
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/customers:
    get:
      tags:
        - user-controller
      summary: get All Customers(Active and passive)
      operationId: getAllCustomersUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/customers/active:
    get:
      tags:
        - user-controller
      summary: get Active Customer Users
      operationId: getActiveCustomerUsersUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/customers/passive:
    get:
      tags:
        - user-controller
      summary: get Passive Customer Users
      operationId: getPassiveCustomerUsersUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/getMyInfos:
    post:
      tags:
        - user-controller
      summary: get logged in user's informations
      operationId: getUserInfosUsingPOST
      description: Every user can use
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/merchant:
    get:
      tags:
        - user-controller
      summary: get All Merchants(Active and passive)
      operationId: getAllMerchantsUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MerchantUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/merchant/active:
    get:
      tags:
        - user-controller
      summary: get ActiveMerchant Users
      operationId: getActiveMerchantUsersUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MerchantUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/merchant/passive:
    get:
      tags:
        - user-controller
      summary: get Passive Merchant Users
      operationId: getPassiveMerchantUsersUsingGET
      description: Used only for user who has admin role
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MerchantUser'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/setActive/{id}':
    post:
      tags:
        - user-controller
      summary: Set passive user into active
      operationId: setActiveUserUsingPOST
      description: Used only for user who has admin role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/setPassive/{id}':
    post:
      tags:
        - user-controller
      summary: set passive user into active
      operationId: setPassiveUserUsingPOST
      description: Used only for user who has admin role
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /health:
    get:
      tags:
        - health-controller
      summary: Get server health
      operationId: getMapUsingGET
      description: Every user can use
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/photos/{name}':
    get:
      tags:
        - photos-controller
      summary: Get image by photo name
      operationId: getProductImageUsingGET
      description: Every user can use
      produces:
        - image/jpeg
      parameters:
        - name: name
          in: path
          description: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
            format: byte
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /sign-up:
    post:
      tags:
        - user-controller
      summary: signUp
      operationId: signUpUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: writableRegister
          description: writableRegister
          required: true
          schema:
            $ref: '#/definitions/WritableRegister'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReadableRegister'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /signin:
    post:
      tags:
        - user-controller
      summary: login
      operationId: loginUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: writableLogin
          description: writableLogin
          required: true
          schema:
            $ref: '#/definitions/WritableLogin'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  Address:
    type: object
    properties:
      city:
        type: string
      details:
        type: string
      id:
        type: integer
        format: int64
      state:
        type: string
      uuid:
        type: string
        format: uuid
    title: Address
  CartItem:
    type: object
    properties:
      id:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      totalPrice:
        type: number
        format: double
      uuid:
        type: string
        format: uuid
    title: CartItem
  Category:
    type: object
    properties:
      childs:
        type: array
        items:
          $ref: '#/definitions/Category'
      id:
        type: integer
        format: int64
      name:
        type: string
      parent:
        $ref: '#/definitions/Category'
      photoUrl:
        type: string
      subCategory:
        type: boolean
      uuid:
        type: string
        format: uuid
    title: Category
  City:
    type: object
    properties:
      code:
        type: integer
        format: int32
      id:
        type: integer
        format: int64
      title:
        type: string
    title: City
  CustomerUser:
    type: object
    properties:
      address:
        $ref: '#/definitions/Address'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
      taxNumber:
        type: string
      username:
        type: string
    title: CustomerUser
  MerchantUser:
    type: object
    properties:
      activeStates:
        type: array
        items:
          type: string
      address:
        $ref: '#/definitions/Address'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
      taxNumber:
        type: string
      username:
        type: string
    title: MerchantUser
  ModelAndView:
    type: object
    properties:
      empty:
        type: boolean
      model:
        type: object
      modelMap:
        type: object
        additionalProperties:
          type: object
      reference:
        type: boolean
      status:
        type: string
        enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
      view:
        $ref: '#/definitions/View'
      viewName:
        type: string
    title: ModelAndView
  Product:
    type: object
    properties:
      barcode:
        type: string
      category:
        $ref: '#/definitions/Category'
      id:
        type: integer
        format: int64
      name:
        type: string
      photoUrl:
        type: string
      productSpecifies:
        type: array
        items:
          $ref: '#/definitions/ProductSpecify'
      status:
        type: boolean
      tax:
        type: number
        format: double
      uuid:
        type: string
        format: uuid
    title: Product
  ProductSpecify:
    type: object
    properties:
      contents:
        type: number
        format: double
      id:
        type: integer
        format: int64
      product:
        $ref: '#/definitions/Product'
      quantity:
        type: integer
        format: int32
      recommendedRetailPrice:
        type: number
        format: double
      states:
        type: array
        items:
          $ref: '#/definitions/State'
      totalPrice:
        type: number
        format: double
      unitPrice:
        type: number
        format: double
      unitType:
        type: string
        enum:
          - KG
          - KL
          - AD
      user:
        $ref: '#/definitions/User'
      uuid:
        type: string
        format: uuid
    title: ProductSpecify
  ReadableCart:
    type: object
    properties:
      id:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'
      quantity:
        type: integer
        format: int32
      totalPrice:
        type: number
        format: double
    title: ReadableCart
  ReadableCategory:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      parentId:
        type: string
      photoUrl:
        type: string
      subCategory:
        type: boolean
    title: ReadableCategory
  ReadableInvoice:
    type: object
    properties:
      buyer:
        type: string
      discount:
        type: number
        format: double
      id:
        type: string
      paidPrice:
        type: number
        format: double
      seller:
        type: string
      totalPrice:
        type: number
        format: double
      unPaidPrice:
        type: number
        format: double
    title: ReadableInvoice
  ReadableOrder:
    type: object
    properties:
      buyerName:
        type: string
      id:
        type: string
      orderDate:
        type: string
        format: date-time
      orderItems:
        type: array
        items:
          $ref: '#/definitions/ReadableOrderItem'
      sellerName:
        type: string
      status:
        type: string
        enum:
          - FINISHED
          - NEW
          - CANCELLED
          - PAID
      totalPrice:
        type: number
        format: double
      waybillDate:
        type: string
        format: date-time
    title: ReadableOrder
  ReadableOrderItem:
    type: object
    properties:
      id:
        type: string
      price:
        type: number
        format: double
      productBarcode:
        type: string
      productName:
        type: string
      productPhotoUrl:
        type: string
      productTax:
        type: number
        format: double
      quantity:
        type: integer
        format: int32
      recommendedRetailPrice:
        type: number
        format: double
      sellerName:
        type: string
      totalPrice:
        type: number
        format: double
      unitPrice:
        type: number
        format: double
      unitType:
        type: string
        enum:
          - KG
          - KL
          - AD
    title: ReadableOrderItem
  ReadableProduct:
    type: object
    properties:
      active:
        type: boolean
      barcode:
        type: string
      categoryName:
        type: string
      id:
        type: string
      name:
        type: string
      photoUrl:
        type: string
      productSpecifies:
        type: array
        items:
          $ref: '#/definitions/ReadableProductSpecify'
      tax:
        type: number
        format: double
    title: ReadableProduct
  ReadableProductSpecify:
    type: object
    properties:
      contents:
        type: number
        format: double
      id:
        type: string
      productName:
        type: string
      quantity:
        type: integer
        format: int32
      recommendedRetailPrice:
        type: number
        format: double
      sellerName:
        type: string
      totalPrice:
        type: number
        format: double
      unitPrice:
        type: number
        format: double
      unitType:
        type: string
        enum:
          - KG
          - KL
          - AD
    title: ReadableProductSpecify
  ReadableRegister:
    type: object
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
      taxNumber:
        type: string
      username:
        type: string
    title: ReadableRegister
  ReadableTicket:
    type: object
    properties:
      addedTime:
        type: string
        format: date-time
      id:
        type: string
      openerName:
        type: string
      status:
        type: string
        enum:
          - OPEN
          - ANSWERED
          - CLOSED
          - SOLVED
      title:
        type: string
    title: ReadableTicket
  ReadableTicketReply:
    type: object
    properties:
      addedTime:
        type: string
        format: date-time
      id:
        type: string
      message:
        type: string
      username:
        type: string
    title: ReadableTicketReply
  Role:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: Role
  SearchOrder:
    type: object
    properties:
      endDate:
        type: string
        format: date-time
      startDate:
        type: string
        format: date-time
      userName:
        type: string
    title: SearchOrder
  SseEmitter:
    type: object
    properties:
      timeout:
        type: integer
        format: int64
    title: SseEmitter
  State:
    type: object
    properties:
      code:
        type: integer
        format: int32
      id:
        type: integer
        format: int64
      title:
        type: string
    title: State
  User:
    type: object
    properties:
      activeStates:
        type: array
        items:
          $ref: '#/definitions/State'
      address:
        $ref: '#/definitions/Address'
      email:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/Role'
      status:
        type: boolean
      taxNumber:
        type: string
      username:
        type: string
      uuid:
        type: string
        format: uuid
    title: User
  UserInfo:
    type: object
    properties:
      activeStates:
        type: array
        items:
          type: string
      address:
        $ref: '#/definitions/Address'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      username:
        type: string
    title: UserInfo
  View:
    type: object
    properties:
      contentType:
        type: string
    title: View
  WritableCartItem:
    type: object
    properties:
      productId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
    title: WritableCartItem
  WritableLogin:
    type: object
    properties:
      password:
        type: string
      username:
        type: string
    title: WritableLogin
  WritableOrder:
    type: object
    properties:
      discount:
        type: number
        format: double
      paidPrice:
        type: number
        format: double
      status:
        type: string
        enum:
          - FINISHED
          - NEW
          - CANCELLED
          - PAID
      waybillDate:
        type: string
        format: date-time
    title: WritableOrder
  WritableProductSpecify:
    type: object
    properties:
      barcode:
        type: string
      city:
        type: string
      contents:
        type: number
        format: double
      quantity:
        type: integer
        format: int32
      recommendedRetailPrice:
        type: number
        format: double
      stateList:
        type: array
        items:
          type: string
      totalPrice:
        type: number
        format: double
      unitPrice:
        type: number
        format: double
      unitType:
        type: string
        enum:
          - KG
          - KL
          - AD
    title: WritableProductSpecify
  WritableRegister:
    type: object
    properties:
      city:
        type: string
      details:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      roleType:
        type: string
        enum:
          - MERCHANT
          - ADMIN
          - CUSTOMER
      state:
        type: string
      taxNumber:
        type: string
      username:
        type: string
    title: WritableRegister
  WritableTicket:
    type: object
    properties:
      title:
        type: string
    title: WritableTicket
  WritableTicketReply:
    type: object
    properties:
      message:
        type: string
    title: WritableTicketReply
